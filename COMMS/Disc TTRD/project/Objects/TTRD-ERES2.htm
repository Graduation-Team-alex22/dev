<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TTRD-ERES2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TTRD-ERES2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Jul 03 00:37:26 2022
<BR><P>
<H3>Maximum Stack Usage =        456 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
comms_rf_stats_update &rArr; large_data_IDLE &rArr; large_data_timeout &rArr; route_pkt &rArr; hk_app &rArr;  route_pkt (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[bc]">UART2_BUF_O_Write_Char_To_Buffer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bd]">UART2_BUF_O_Write_String_To_Buffer</a><BR>
 <LI><a href="#[c9]">USART_ClearFlag</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a3]">assert_failed</a><BR>
 <LI><a href="#[b0]">DMA_Cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a3]">assert_failed</a><BR>
 <LI><a href="#[a5]">REG_CONFIG_CHECKS_UART_Check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[11b]">UART2_BUF_O_Check_Data_Integrity</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[a3]">assert_failed</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[10b]">REG_CONFIG_TIMER_Check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[b3]">REG_CONFIG_CHECKS_UART_Store</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[186]">verification_app</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">route_pkt</a><BR>
 <LI><a href="#[1a3]">test_app</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">route_pkt</a><BR>
 <LI><a href="#[17b]">hk_app</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">route_pkt</a><BR>
 <LI><a href="#[195]">large_data_downlinkTx_api</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">route_pkt</a><BR>
 <LI><a href="#[193]">large_data_retryTx_api</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">route_pkt</a><BR>
 <LI><a href="#[191]">large_data_lastRx_api</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">route_pkt</a><BR>
 <LI><a href="#[190]">large_data_intRx_api</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">route_pkt</a><BR>
 <LI><a href="#[18f]">large_data_firstRx_api</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">route_pkt</a><BR>
 <LI><a href="#[18b]">large_data_ackTx_api</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">route_pkt</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[67]">ADC1_Update</a> from ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">CC_RX_BUF_O_Update</a> from cc_rx.o(i.CC_RX_BUF_O_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[6b]">CC_RX_update</a> from cc_rx.o(i.CC_RX_update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[6e]">CC_TX_update</a> from cc_tx.o(i.CC_TX_update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[5a]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">HEARTBEAT_SW_Update</a> from ttrd2-05a-t0401a-v001a_heartbeat_sw_task.o(i.HEARTBEAT_SW_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">OBC_C_BUF_O_Update</a> from obc_comm.o(i.OBC_C_BUF_O_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[69]">OBC_C_update</a> from obc_comm.o(i.OBC_C_update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[4f]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">PROCESSOR_TASK_Update</a> from ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">RTT_05a_Scheduler_Osc_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_05a_Scheduler_Osc_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[60]">RTT_05b_Scheduler_Osc_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_05b_Scheduler_Osc_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[61]">RTT_06a_MoniTTor_Overrun_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_06a_MoniTTor_Overrun_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[62]">RTT_06b_MoniTTor_Underrun_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_06b_MoniTTor_Underrun_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[63]">RTT_07_PredicTTor_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_07_PredicTTor_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">SWITCH_BUTTON1_Update</a> from ttrd2-05a-t0401a-v001a_switch_task.o(i.SWITCH_BUTTON1_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[b]">SysTick_Handler</a> from ttrd2-18a-t0401a-v001a_monittor_i.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from ttrd2-19a-t0401a-v001c_scheduler.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">UART2_BUF_O_Update</a> from ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">WATCHDOG_Update</a> from ttrd2-05a-t0401a-v001a_iwdt_task.o(i.WATCHDOG_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[73]">comms_rf_stats_update</a> from stats.o(i.comms_rf_stats_update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[6c]">rx_update</a> from rx_manager.o(i.rx_update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[70]">sys_refresh</a> from upsat.o(i.sys_refresh) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[71]">tx_type_update</a> from tx_manager.o(i.tx_type_update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[72]">tx_update</a> from tx_manager.o(i.tx_update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[74]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[77]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1c9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ca]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1cb]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1cc]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1cd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[78]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1da]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1db]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1dc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1dd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1de]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1df]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[82]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1e2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1e3]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1e4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1e5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1e6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1e7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1e8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1e9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[76]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1ea]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; PROCESSOR_Init &rArr; PROCESSOR_Configure_Reqd_MoSt &rArr; comms_init &rArr; CC_TX_init &rArr; CC_TX_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1ec]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[8d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[81]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1ed]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[83]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[142]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rf_switch_cmd
</UL>

<P><STRONG><a name="[143]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rf_switch_cmd
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_prepare_frame
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_extract_payload
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_send
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_ex_wod_obc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_wod_send
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_data_packet
</UL>

<P><STRONG><a name="[85]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1ee]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_UART_recv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1ef]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_prepare_frame
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_init
</UL>

<P><STRONG><a name="[89]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[88]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_send
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_payload
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_wod_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1f4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[80]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1f7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1f9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>ADC1_Get_Temperature_Celsius</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Get_Temperature_Celsius))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ADC1_Get_Temperature_Celsius &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[90]"></a>ADC1_Get_Temperature_mv</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Get_Temperature_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ADC1_Get_Temperature_mv &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_update
</UL>

<P><STRONG><a name="[91]"></a>ADC1_Init</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ADC1_Init &rArr; ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_ADC1_Store
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonStructInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[67]"></a>ADC1_Update</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ADC1_Update &rArr; ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_ADC1_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[98]"></a>ADC_Cmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_Cmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[95]"></a>ADC_CommonInit</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_CommonInit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[93]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[a1]"></a>ADC_GetConversionValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_GetConversionValue &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>

<P><STRONG><a name="[9f]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>

<P><STRONG><a name="[96]"></a>ADC_Init</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[9c]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADC_RegularChannelConfig &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>

<P><STRONG><a name="[9d]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_SoftwareStartConv &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>

<P><STRONG><a name="[92]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[97]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_TempSensorVrefintCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_TempSensorVrefintCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[a4]"></a>CC_RX_BUF_O_Check_Data_Integrity</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cc_rx.o(i.CC_RX_BUF_O_Check_Data_Integrity))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CC_RX_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Update
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Send_Char
</UL>

<P><STRONG><a name="[a6]"></a>CC_RX_BUF_O_Init</STRONG> (Thumb, 326 bytes, Stack size 96 bytes, cc_rx.o(i.CC_RX_BUF_O_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CC_RX_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Store
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_init
</UL>

<P><STRONG><a name="[b4]"></a>CC_RX_BUF_O_Send_Char</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cc_rx.o(i.CC_RX_BUF_O_Send_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CC_RX_BUF_O_Send_Char &rArr; CC_RX_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Check_Data_Integrity
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Update
</UL>

<P><STRONG><a name="[6a]"></a>CC_RX_BUF_O_Update</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, cc_rx.o(i.CC_RX_BUF_O_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CC_RX_BUF_O_Update &rArr; CC_RX_BUF_O_Send_Char &rArr; CC_RX_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Send_Char
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Check_Data_Integrity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[b8]"></a>CC_RX_BUF_O_Write_Char_To_Buffer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cc_rx.o(i.CC_RX_BUF_O_Write_Char_To_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Write_String_To_Buffer
</UL>

<P><STRONG><a name="[b7]"></a>CC_RX_BUF_O_Write_String_To_Buffer</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cc_rx.o(i.CC_RX_BUF_O_Write_String_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CC_RX_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_SET_Parameters
</UL>

<P><STRONG><a name="[c0]"></a>CC_RX_Clear_Command</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cc_rx.o(i.CC_RX_Clear_Command))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_SET_Parameters
</UL>

<P><STRONG><a name="[b9]"></a>CC_RX_DMA_CHECK</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cc_rx.o(i.CC_RX_DMA_CHECK))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CC_RX_DMA_CHECK &rArr; DMA_GetCurrDataCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_PROCESS_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_update
</UL>

<P><STRONG><a name="[bb]"></a>CC_RX_PROCESS_DATA</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, cc_rx.o(i.CC_RX_PROCESS_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CC_RX_PROCESS_DATA &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_DMA_CHECK
</UL>

<P><STRONG><a name="[be]"></a>CC_RX_SET_Parameters</STRONG> (Thumb, 898 bytes, Stack size 8 bytes, cc_rx.o(i.CC_RX_SET_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CC_RX_SET_Parameters &rArr; GPIO_SetBits &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_Clear_Command
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_update
</UL>

<P><STRONG><a name="[c1]"></a>CC_RX_data_packet</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, cc_rx.o(i.CC_RX_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CC_RX_data_packet &rArr; UART2_BUF_O_Write_Signed_Number_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Signed_Number_To_Buffer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
</UL>

<P><STRONG><a name="[c5]"></a>CC_RX_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cc_rx.o(i.CC_RX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CC_RX_init &rArr; CC_RX_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[6b]"></a>CC_RX_update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cc_rx.o(i.CC_RX_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CC_RX_update &rArr; CC_RX_SET_Parameters &rArr; GPIO_SetBits &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_SET_Parameters
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_DMA_CHECK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[c6]"></a>CC_TX_BUF_O_Check_Data_Integrity</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cc_tx.o(i.CC_TX_BUF_O_Check_Data_Integrity))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CC_TX_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Send_All_Data
</UL>

<P><STRONG><a name="[c7]"></a>CC_TX_BUF_O_Init</STRONG> (Thumb, 420 bytes, Stack size 160 bytes, cc_tx.o(i.CC_TX_BUF_O_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CC_TX_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Store
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_init
</UL>

<P><STRONG><a name="[c8]"></a>CC_TX_BUF_O_Send_All_Data</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cc_tx.o(i.CC_TX_BUF_O_Send_All_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CC_TX_BUF_O_Send_All_Data &rArr; CC_TX_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Check_Data_Integrity
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Update
</UL>

<P><STRONG><a name="[ca]"></a>CC_TX_BUF_O_Update</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cc_tx.o(i.CC_TX_BUF_O_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CC_TX_BUF_O_Update &rArr; CC_TX_BUF_O_Send_All_Data &rArr; CC_TX_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Send_All_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_update
</UL>

<P><STRONG><a name="[cb]"></a>CC_TX_BUF_O_Write_Char_To_Buffer</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, cc_tx.o(i.CC_TX_BUF_O_Write_Char_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CC_TX_BUF_O_Write_Char_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_data_packet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Write_String_To_Buffer
</UL>

<P><STRONG><a name="[cc]"></a>CC_TX_BUF_O_Write_String_To_Buffer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cc_tx.o(i.CC_TX_BUF_O_Write_String_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CC_TX_BUF_O_Write_String_To_Buffer &rArr; CC_TX_BUF_O_Write_Char_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_SET_Parameters
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[d0]"></a>CC_TX_Clear_Command</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cc_tx.o(i.CC_TX_Clear_Command))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_SET_Parameters
</UL>

<P><STRONG><a name="[cd]"></a>CC_TX_DMA_CHECK</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cc_tx.o(i.CC_TX_DMA_CHECK))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CC_TX_DMA_CHECK &rArr; DMA_GetCurrDataCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_PROCESS_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_update
</UL>

<P><STRONG><a name="[ce]"></a>CC_TX_PROCESS_DATA</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cc_tx.o(i.CC_TX_PROCESS_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CC_TX_PROCESS_DATA &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_DMA_CHECK
</UL>

<P><STRONG><a name="[cf]"></a>CC_TX_SET_Parameters</STRONG> (Thumb, 898 bytes, Stack size 8 bytes, cc_tx.o(i.CC_TX_SET_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CC_TX_SET_Parameters &rArr; GPIO_SetBits &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_Clear_Command
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_update
</UL>

<P><STRONG><a name="[d1]"></a>CC_TX_data_packet</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cc_tx.o(i.CC_TX_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CC_TX_data_packet &rArr; CC_TX_BUF_O_Write_Char_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[d2]"></a>CC_TX_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cc_tx.o(i.CC_TX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CC_TX_init &rArr; CC_TX_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[6e]"></a>CC_TX_update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cc_tx.o(i.CC_TX_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CC_TX_update &rArr; CC_TX_BUF_O_Update &rArr; CC_TX_BUF_O_Send_All_Data &rArr; CC_TX_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_SET_Parameters
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_DMA_CHECK
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[b0]"></a>DMA_Cmd</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DMA_Cmd &rArr;  assert_failed (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Send_All_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Send_All_Data
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>

<P><STRONG><a name="[b2]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_GetCmdStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>

<P><STRONG><a name="[ba]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA_GetCurrDataCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_DMA_CHECK
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DMA_CHECK
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_DMA_CHECK
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_DMA_CHECK
</UL>

<P><STRONG><a name="[ae]"></a>DMA_Init</STRONG> (Thumb, 658 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>

<P><STRONG><a name="[ad]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>

<P><STRONG><a name="[aa]"></a>GPIO_Init</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2PFC_BUF_O_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_PinAFConfig &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2PFC_BUF_O_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>

<P><STRONG><a name="[d3]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_ReadInputDataBit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Update
</UL>

<P><STRONG><a name="[bf]"></a>GPIO_ResetBits</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_ResetBits &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_SET_Parameters
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_SET_Parameters
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_SetBits</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_SetBits &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_SET_Parameters
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_SET_Parameters
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
</UL>

<P><STRONG><a name="[d4]"></a>HEARTBEAT_SW_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_heartbeat_sw_task.o(i.HEARTBEAT_SW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HEARTBEAT_SW_Init &rArr; GPIO_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[65]"></a>HEARTBEAT_SW_Update</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_heartbeat_sw_task.o(i.HEARTBEAT_SW_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HEARTBEAT_SW_Update &rArr; SWITCH_BUTTON1_Get_State &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Get_State
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_GPIO_Check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[d7]"></a>HLDLC_deframe</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, services.o(i.HLDLC_deframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HLDLC_deframe &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[d9]"></a>HLDLC_frame</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, services.o(i.HLDLC_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HLDLC_frame &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>

<P><STRONG><a name="[da]"></a>HSI_reset_source</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, services.o(i.HSI_reset_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HSI_reset_source &rArr; RCC_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_set_reset_src
</UL>

<P><STRONG><a name="[107]"></a>MONITTORi_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.MONITTORi_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
</UL>

<P><STRONG><a name="[10f]"></a>MONITTORi_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.MONITTORi_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[dd]"></a>MONITTORi_Start</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.MONITTORi_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MONITTORi_Start &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
</UL>

<P><STRONG><a name="[de]"></a>MONITTORi_Stop</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.MONITTORi_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MONITTORi_Stop &rArr; PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Get_MoSt
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
</UL>

<P><STRONG><a name="[e3]"></a>NVIC_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Set_Interrupt_Priority_Levels
</UL>

<P><STRONG><a name="[e4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NVIC_PriorityGroupConfig &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Set_Interrupt_Priority_Levels
</UL>

<P><STRONG><a name="[e5]"></a>OBC_C_BUF_O_Check_Data_Integrity</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, obc_comm.o(i.OBC_C_BUF_O_Check_Data_Integrity))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OBC_C_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Send_All_Data
</UL>

<P><STRONG><a name="[e6]"></a>OBC_C_BUF_O_Init</STRONG> (Thumb, 376 bytes, Stack size 160 bytes, obc_comm.o(i.OBC_C_BUF_O_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OBC_C_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Store
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_init
</UL>

<P><STRONG><a name="[e7]"></a>OBC_C_BUF_O_Send_All_Data</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, obc_comm.o(i.OBC_C_BUF_O_Send_All_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OBC_C_BUF_O_Send_All_Data &rArr; OBC_C_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Check_Data_Integrity
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Update
</UL>

<P><STRONG><a name="[6f]"></a>OBC_C_BUF_O_Update</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, obc_comm.o(i.OBC_C_BUF_O_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OBC_C_BUF_O_Update &rArr; OBC_C_BUF_O_Send_All_Data &rArr; OBC_C_BUF_O_Check_Data_Integrity &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Send_All_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[e8]"></a>OBC_C_BUF_O_Write_Char_To_Buffer</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, obc_comm.o(i.OBC_C_BUF_O_Write_Char_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OBC_C_BUF_O_Write_Char_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_UART_send
</UL>

<P><STRONG><a name="[e9]"></a>OBC_C_DMA_CHECK</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, obc_comm.o(i.OBC_C_DMA_CHECK))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OBC_C_DMA_CHECK &rArr; DMA_GetCurrDataCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_PROCESS_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[ea]"></a>OBC_C_PROCESS_DATA</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, obc_comm.o(i.OBC_C_PROCESS_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OBC_C_PROCESS_DATA &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_DMA_CHECK
</UL>

<P><STRONG><a name="[eb]"></a>OBC_C_UART_recv</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, obc_comm.o(i.OBC_C_UART_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OBC_C_UART_recv &rArr; UART2_BUF_O_Write_Signed_Number_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Signed_Number_To_Buffer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[ec]"></a>OBC_C_UART_send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, obc_comm.o(i.OBC_C_UART_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OBC_C_UART_send &rArr; OBC_C_BUF_O_Write_Char_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>

<P><STRONG><a name="[ed]"></a>OBC_C_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, obc_comm.o(i.OBC_C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OBC_C_init &rArr; OBC_C_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[69]"></a>OBC_C_update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, obc_comm.o(i.OBC_C_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = OBC_C_update &rArr; import_pkt &rArr; route_pkt &rArr; hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[f0]"></a>PREDICTTORi_Check_Task_Sequence</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001b_predicttor_i.o(i.PREDICTTORi_Check_Task_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PREDICTTORi_Check_Task_Sequence &rArr; PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Get_MoSt
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
</UL>

<P><STRONG><a name="[110]"></a>PREDICTTORi_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_predicttor_i.o(i.PREDICTTORi_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[e2]"></a>PROCESSOR_Change_MoSt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Change_MoSt))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05a_Scheduler_Osc_Test_Update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
</UL>

<P><STRONG><a name="[df]"></a>PROCESSOR_Get_MoSt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Get_MoSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
</UL>

<P><STRONG><a name="[102]"></a>PROCESSOR_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PROCESSOR_Init &rArr; PROCESSOR_Configure_Reqd_MoSt &rArr; comms_init &rArr; CC_TX_init &rArr; CC_TX_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>PROCESSOR_Perform_Safe_Shutdown</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Perform_Safe_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Get_State
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Check
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Temperature_mv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Store
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Check
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Check_Data_Integrity
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Update
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Get_State
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_GPIO_Check
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_ADC1_Check
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Temperature_Celsius
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Check_Data_Integrity
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Check_Data_Integrity
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Check_Data_Integrity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Add_Task
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_07_PredicTTor_Test_Update
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_06b_MoniTTor_Underrun_Test_Update
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_06a_MoniTTor_Overrun_Test_Update
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05b_Scheduler_Osc_Test_Update
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Get_MoSt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Start
</UL>

<P><STRONG><a name="[e1]"></a>PROCESSOR_Store_PFC</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Store_PFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PROCESSOR_Store_PFC &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05a_Scheduler_Osc_Test_Update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
</UL>

<P><STRONG><a name="[e0]"></a>PROCESSOR_Store_Reqd_MoSt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Store_Reqd_MoSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PROCESSOR_Store_Reqd_MoSt &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05a_Scheduler_Osc_Test_Update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
</UL>

<P><STRONG><a name="[fd]"></a>PROCESSOR_TASK_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PROCESSOR_TASK_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Retrieve_State
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[68]"></a>PROCESSOR_TASK_Update</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PROCESSOR_TASK_Update &rArr; ADC1_Get_Temperature_Celsius &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Store_State
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number03_To_Buffer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Temperature_Celsius
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[106]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PWR_BackupAccessCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Store_State
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
</UL>

<P><STRONG><a name="[a8]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2PFC_BUF_O_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
</UL>

<P><STRONG><a name="[a7]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Store_State
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2PFC_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[94]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
</UL>

<P><STRONG><a name="[dc]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_reset_source
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
</UL>

<P><STRONG><a name="[121]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[db]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RCC_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_reset_source
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
</UL>

<P><STRONG><a name="[a2]"></a>REG_CONFIG_CHECKS_ADC1_Check</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_adc1.o(i.REG_CONFIG_CHECKS_ADC1_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = REG_CONFIG_CHECKS_ADC1_Check &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
</UL>

<P><STRONG><a name="[99]"></a>REG_CONFIG_CHECKS_ADC1_Store</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_adc1.o(i.REG_CONFIG_CHECKS_ADC1_Store))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[d5]"></a>REG_CONFIG_CHECKS_GPIO_Check</STRONG> (Thumb, 542 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_gpio.o(i.REG_CONFIG_CHECKS_GPIO_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = REG_CONFIG_CHECKS_GPIO_Check &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Update
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
</UL>

<P><STRONG><a name="[fe]"></a>REG_CONFIG_CHECKS_GPIO_Store</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_gpio.o(i.REG_CONFIG_CHECKS_GPIO_Store))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[a5]"></a>REG_CONFIG_CHECKS_UART_Check</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_uart.o(i.REG_CONFIG_CHECKS_UART_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = REG_CONFIG_CHECKS_UART_Check &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Check_Data_Integrity
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Check_Data_Integrity
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Check_Data_Integrity
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Check_Data_Integrity
</UL>

<P><STRONG><a name="[b3]"></a>REG_CONFIG_CHECKS_UART_Store</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_uart.o(i.REG_CONFIG_CHECKS_UART_Store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = REG_CONFIG_CHECKS_UART_Store &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2PFC_BUF_O_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>

<P><STRONG><a name="[10b]"></a>REG_CONFIG_TIMER_Check</STRONG> (Thumb, 512 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_timer.o(i.REG_CONFIG_TIMER_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = REG_CONFIG_TIMER_Check &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>REG_CONFIG_TIMER_Store</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_timer.o(i.REG_CONFIG_TIMER_Store))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
</UL>

<P><STRONG><a name="[104]"></a>REPORT_PFC_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ttrd2-04a-t0401a-v001a_pfc_reporting.o(i.REPORT_PFC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2PFC_BUF_O_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>

<P><STRONG><a name="[105]"></a>REPORT_PFC_Update</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ttrd2-04a-t0401a-v001a_pfc_reporting.o(i.REPORT_PFC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = REPORT_PFC_Update &rArr; GPIO_SetBits &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number03_To_Buffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>

<P><STRONG><a name="[5f]"></a>RTT_05a_Scheduler_Osc_Test_Update</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_05a_Scheduler_Osc_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTT_05a_Scheduler_Osc_Test_Update &rArr; PROCESSOR_Store_Reqd_MoSt &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[60]"></a>RTT_05b_Scheduler_Osc_Test_Update</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_05b_Scheduler_Osc_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RTT_05b_Scheduler_Osc_Test_Update &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[61]"></a>RTT_06a_MoniTTor_Overrun_Test_Update</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_06a_MoniTTor_Overrun_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RTT_06a_MoniTTor_Overrun_Test_Update &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[62]"></a>RTT_06b_MoniTTor_Underrun_Test_Update</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_06b_MoniTTor_Underrun_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RTT_06b_MoniTTor_Underrun_Test_Update &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[63]"></a>RTT_07_PredicTTor_Test_Update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_07_PredicTTor_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RTT_07_PredicTTor_Test_Update &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[f6]"></a>RTT_Startup_04_WDT_Check</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_Startup_04_WDT_Check))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[f8]"></a>SCH_Add_Task</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Add_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SCH_Add_Task &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[10d]"></a>SCH_Dispatch_Tasks</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Dispatch_Tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SCH_Dispatch_Tasks &rArr; PREDICTTORi_Check_Task_Sequence &rArr; PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>SCH_Init_Microseconds</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Init_Microseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SCH_Init_Microseconds &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Set_Interrupt_Priority_Levels
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[111]"></a>SCH_Set_Interrupt_Priority_Levels</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Set_Interrupt_Priority_Levels))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SCH_Set_Interrupt_Priority_Levels &rArr; NVIC_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[112]"></a>SCH_Start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SCH_Start &rArr; TIM_Cmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Store
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>SWITCH_BUTTON1_Get_State</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_switch_task.o(i.SWITCH_BUTTON1_Get_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SWITCH_BUTTON1_Get_State &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
</UL>

<P><STRONG><a name="[fc]"></a>SWITCH_BUTTON1_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_switch_task.o(i.SWITCH_BUTTON1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWITCH_BUTTON1_Init &rArr; GPIO_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[66]"></a>SWITCH_BUTTON1_Update</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_switch_task.o(i.SWITCH_BUTTON1_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SWITCH_BUTTON1_Update &rArr; REG_CONFIG_CHECKS_GPIO_Check &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_GPIO_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SysTick_Handler &rArr; PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Get_MoSt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TIM2_IRQHandler &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>TIMEOUT_T3_USEC_Get_Timer_State</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_timeout_t3.o(i.TIMEOUT_T3_USEC_Get_Timer_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIMEOUT_T3_USEC_Get_Timer_State &rArr; TIM_GetCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Send_Char
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[9a]"></a>TIMEOUT_T3_USEC_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_timeout_t3.o(i.TIMEOUT_T3_USEC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMEOUT_T3_USEC_Init &rArr; TIM_TimeBaseInit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2PFC_BUF_O_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
</UL>

<P><STRONG><a name="[9e]"></a>TIMEOUT_T3_USEC_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_timeout_t3.o(i.TIMEOUT_T3_USEC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMEOUT_T3_USEC_Start &rArr; TIM_SetCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Store
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Send_Char
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[117]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_ClearITPendingBit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>TIM_Cmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_Cmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
</UL>

<P><STRONG><a name="[118]"></a>TIM_GetCounter</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM_GetCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
</UL>

<P><STRONG><a name="[113]"></a>TIM_ITConfig</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_ITConfig &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
</UL>

<P><STRONG><a name="[11a]"></a>TIM_SetCounter</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_SetCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
</UL>

<P><STRONG><a name="[10e]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_TimeBaseInit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[119]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
</UL>

<P><STRONG><a name="[10c]"></a>UART2PFC_BUF_O_Init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2PFC_BUF_O_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Store
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
</UL>

<P><STRONG><a name="[11b]"></a>UART2_BUF_O_Check_Data_Integrity</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Check_Data_Integrity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = UART2_BUF_O_Check_Data_Integrity &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
</UL>

<P><STRONG><a name="[f2]"></a>UART2_BUF_O_Init</STRONG> (Thumb, 380 bytes, Stack size 160 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Store
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[f3]"></a>UART2_BUF_O_Send_All_Data</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Send_All_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Check_Data_Integrity &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Check_Data_Integrity
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Update
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
</UL>

<P><STRONG><a name="[6d]"></a>UART2_BUF_O_Update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART2_BUF_O_Update &rArr; UART2_DMA_CHECK &rArr; DMA_GetCurrDataCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DMA_CHECK
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[bc]"></a>UART2_BUF_O_Write_Char_To_Buffer</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_Char_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_pkt_To_Buffer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PROCESS_DATA
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Frame_To_Buffer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_PROCESS_DATA
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_SET_Parameters
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_PROCESS_DATA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_SET_Parameters
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_PROCESS_DATA
</UL>

<P><STRONG><a name="[11d]"></a>UART2_BUF_O_Write_Frame_To_Buffer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_Frame_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_BUF_O_Write_Frame_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_update
</UL>

<P><STRONG><a name="[11e]"></a>UART2_BUF_O_Write_Number02_To_Buffer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_Number02_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART2_BUF_O_Write_Number02_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_pkt_To_Buffer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_outbound
</UL>

<P><STRONG><a name="[10a]"></a>UART2_BUF_O_Write_Number03_To_Buffer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_Number03_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART2_BUF_O_Write_Number03_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
</UL>

<P><STRONG><a name="[c2]"></a>UART2_BUF_O_Write_Number04_To_Buffer</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_Number04_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_pkt_To_Buffer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_outbound
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_inbound
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_data_packet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
</UL>

<P><STRONG><a name="[c3]"></a>UART2_BUF_O_Write_Signed_Number_To_Buffer</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_Signed_Number_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART2_BUF_O_Write_Signed_Number_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_UART_recv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_data_packet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_update
</UL>

<P><STRONG><a name="[bd]"></a>UART2_BUF_O_Write_String_To_Buffer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_String_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_wod_obc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_UART_recv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_refresh
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_pkt_To_Buffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number02_To_Buffer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_outbound
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_inbound
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_update
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PROCESS_DATA
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Signed_Number_To_Buffer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number03_To_Buffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_timeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_PROCESS_DATA
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Write_Char_To_Buffer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_SET_Parameters
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Write_Char_To_Buffer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_SET_Parameters
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_PROCESS_DATA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_data_packet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_update
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_update
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_type_update
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
</UL>

<P><STRONG><a name="[11f]"></a>UART2_BUF_O_Write_pkt_To_Buffer</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_pkt_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART2_BUF_O_Write_pkt_To_Buffer &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number02_To_Buffer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_refresh
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
</UL>

<P><STRONG><a name="[11c]"></a>UART2_DMA_CHECK</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_DMA_CHECK))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART2_DMA_CHECK &rArr; DMA_GetCurrDataCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PROCESS_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Update
</UL>

<P><STRONG><a name="[120]"></a>UART2_PROCESS_DATA</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_PROCESS_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART2_PROCESS_DATA &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DMA_CHECK
</UL>

<P><STRONG><a name="[c9]"></a>USART_ClearFlag</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = USART_ClearFlag &rArr;  assert_failed (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Send_All_Data
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Send_All_Data
</UL>

<P><STRONG><a name="[af]"></a>USART_Cmd</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2PFC_BUF_O_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>

<P><STRONG><a name="[b1]"></a>USART_DMACmd</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_DMACmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>

<P><STRONG><a name="[b5]"></a>USART_GetFlagStatus</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Send_Char
</UL>

<P><STRONG><a name="[ac]"></a>USART_Init</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2PFC_BUF_O_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_BUF_O_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Init
</UL>

<P><STRONG><a name="[b6]"></a>USART_SendData</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_SendData &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_BUF_O_Send_Char
</UL>

<P><STRONG><a name="[103]"></a>WATCHDOG_Get_State</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_iwdt_task.o(i.WATCHDOG_Get_State))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>

<P><STRONG><a name="[f5]"></a>WATCHDOG_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_iwdt_task.o(i.WATCHDOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WATCHDOG_Init &rArr; WATCHDOG_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[64]"></a>WATCHDOG_Update</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_iwdt_task.o(i.WATCHDOG_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WATCHDOG_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurrentTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05b_Scheduler_Osc_Test_Update
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05a_Scheduler_Osc_Test_Update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[123]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
</UL>

<P><STRONG><a name="[15d]"></a>__hardfp_nanf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanf.o(i.__hardfp_nanf))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_get_temperature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_eps_temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_temp
</UL>

<P><STRONG><a name="[a3]"></a>assert_failed</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001a_assert_failed.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number03_To_Buffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>

<P><STRONG><a name="[138]"></a>ax25_bit_stuffing</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ax_25.o(i.ax25_bit_stuffing))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ax25_bit_stuffing
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_send
</UL>

<P><STRONG><a name="[127]"></a>ax25_check_dest_callsign</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ax_25.o(i.ax25_check_dest_callsign))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ax25_check_dest_callsign &rArr; strnlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_payload
</UL>

<P><STRONG><a name="[129]"></a>ax25_create_addr_field</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ax_25.o(i.ax25_create_addr_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ax25_create_addr_field &rArr; strnlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_send
</UL>

<P><STRONG><a name="[12a]"></a>ax25_decode</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, ax_25.o(i.ax25_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ax25_decode &rArr; ax25_fcs
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_fcs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_decoder_reset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_decoder_enter_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_recv
</UL>

<P><STRONG><a name="[12e]"></a>ax25_extract_payload</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ax_25.o(i.ax25_extract_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ax25_extract_payload &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_payload
</UL>

<P><STRONG><a name="[12c]"></a>ax25_fcs</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ax_25.o(i.ax25_fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ax25_fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_prepare_frame
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_decode
</UL>

<P><STRONG><a name="[12f]"></a>ax25_prepare_frame</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ax_25.o(i.ax25_prepare_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ax25_prepare_frame &rArr; ax25_fcs
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_fcs
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_send
</UL>

<P><STRONG><a name="[130]"></a>ax25_recv</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, ax_25.o(i.ax25_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ax25_recv &rArr; ax25_decode &rArr; ax25_fcs
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_decode
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
</UL>

<P><STRONG><a name="[132]"></a>ax25_rx_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ax_25.o(i.ax25_rx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ax25_rx_init &rArr; descrambler_init &rArr; scrambler_init &rArr; lfsr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descrambler_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_rx_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>

<P><STRONG><a name="[134]"></a>ax25_rx_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ax_25.o(i.ax25_rx_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ax25_rx_reset &rArr; descrambler_reset &rArr; scrambler_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descrambler_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_rx_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
</UL>

<P><STRONG><a name="[136]"></a>ax25_send</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, ax_25.o(i.ax25_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrambler_reset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrambler_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scramble_data_nrzi
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_prepare_frame
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_create_addr_field
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_bit_stuffing
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[176]"></a>bat_current_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wod_handling.o(i.bat_current_valid))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_wod
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_current
</UL>

<P><STRONG><a name="[13c]"></a>bat_temp_valid</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, wod_handling.o(i.bat_temp_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bat_temp_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_temp_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_wod
</UL>

<P><STRONG><a name="[17a]"></a>bat_voltage_valid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wod_handling.o(i.bat_voltage_valid))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_wod
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_voltage
</UL>

<P><STRONG><a name="[13f]"></a>bus_3300mV_current_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wod_handling.o(i.bus_3300mV_current_valid))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_wod
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_5000mV_current_valid
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bus_3300_current
</UL>

<P><STRONG><a name="[13e]"></a>bus_5000mV_current_valid</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, wod_handling.o(i.bus_5000mV_current_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bus_5000mV_current_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_3300mV_current_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_wod
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bus_5000_current
</UL>

<P><STRONG><a name="[140]"></a>checkSum</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, services.o(i.checkSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = checkSum &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_pkt
</UL>

<P><STRONG><a name="[170]"></a>cnv16_8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, services.o(i.cnv16_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnv16_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecss_stats_hk
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_verifyPkt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkPkt
</UL>

<P><STRONG><a name="[182]"></a>cnv32_8</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, services.o(i.cnv32_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnv32_8
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
</UL>

<P><STRONG><a name="[18c]"></a>cnv8_16</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, services.o(i.cnv8_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnv8_16
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_ackTx_api
</UL>

<P><STRONG><a name="[148]"></a>comms_ex_wod_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wod_handling.o(i.comms_ex_wod_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = comms_ex_wod_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[149]"></a>comms_ex_wod_send</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, wod_handling.o(i.comms_ex_wod_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = comms_ex_wod_send &rArr; hk_crt_empty_pkt_TM &rArr; hk_crt_pkt_TM &rArr; hk_report_parameters &rArr; comms_wod_send &rArr; send_payload &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ecss
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cmd_ctrl_enabled
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_empty_pkt_TM
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_update
</UL>

<P><STRONG><a name="[fa]"></a>comms_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, comms_manager.o(i.comms_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = comms_init &rArr; CC_TX_init &rArr; CC_TX_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_wod_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_pool_INIT
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cmd_and_ctrl_period
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[f9]"></a>comms_persistent_mem_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, services.o(i.comms_persistent_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = comms_persistent_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[15a]"></a>comms_read_persistent_word</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, services.o(i.comms_read_persistent_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = comms_read_persistent_word
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_trasmit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_type_update
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tx_enabled
</UL>

<P><STRONG><a name="[1a5]"></a>comms_rf_stats_frame_received</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stats.o(i.comms_rf_stats_frame_received))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_update
</UL>

<P><STRONG><a name="[1b0]"></a>comms_rf_stats_frame_transmitted</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stats.o(i.comms_rf_stats_frame_transmitted))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_payload
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ecss
</UL>

<P><STRONG><a name="[15c]"></a>comms_rf_stats_get_temperature</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stats.o(i.comms_rf_stats_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = comms_rf_stats_get_temperature
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nanf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
</UL>

<P><STRONG><a name="[154]"></a>comms_rf_stats_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stats.o(i.comms_rf_stats_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = comms_rf_stats_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[1a0]"></a>comms_rf_stats_invalid_crc_frame</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stats.o(i.comms_rf_stats_invalid_crc_frame))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_payload
</UL>

<P><STRONG><a name="[1a1]"></a>comms_rf_stats_invalid_dest_frame</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stats.o(i.comms_rf_stats_invalid_dest_frame))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_payload
</UL>

<P><STRONG><a name="[fb]"></a>comms_rf_stats_set_reset_src</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stats.o(i.comms_rf_stats_set_reset_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = comms_rf_stats_set_reset_src &rArr; HSI_reset_source &rArr; RCC_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_reset_source
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[144]"></a>comms_rf_stats_sw_cmd_failed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stats.o(i.comms_rf_stats_sw_cmd_failed))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rf_switch_cmd
</UL>

<P><STRONG><a name="[73]"></a>comms_rf_stats_update</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, stats.o(i.comms_rf_stats_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = comms_rf_stats_update &rArr; large_data_IDLE &rArr; large_data_timeout &rArr; route_pkt &rArr; hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_pool_IDLE
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_IDLE
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Temperature_mv
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uptime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[161]"></a>comms_rf_stats_wod_received</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stats.o(i.comms_rf_stats_wod_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = comms_rf_stats_wod_received &rArr; get_wod_eps_temp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_utc_time
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_eps_temp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bus_5000_current
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bus_3300_current
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_voltage
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_temp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_current
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_wod
</UL>

<P><STRONG><a name="[13d]"></a>comms_temp_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wod_handling.o(i.comms_temp_valid))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_temp_valid
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_wod
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eps_temp_valid
</UL>

<P><STRONG><a name="[156]"></a>comms_wod_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wod_handling.o(i.comms_wod_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = comms_wod_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[169]"></a>comms_wod_send</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wod_handling.o(i.comms_wod_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = comms_wod_send &rArr; send_payload &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_payload
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cmd_ctrl_enabled
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_update
</UL>

<P><STRONG><a name="[14c]"></a>crt_pkt</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, services.o(i.crt_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_heartbeat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_pkt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TM
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_verifyPkt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkPkt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abortPkt
</UL>

<P><STRONG><a name="[1aa]"></a>cw_get_bat_current_char</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, cw.o(i.cw_get_bat_current_char))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[1a9]"></a>cw_get_bat_voltage_char</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, cw.o(i.cw_get_bat_voltage_char))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[1ad]"></a>cw_get_cont_errors_char</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, cw.o(i.cw_get_cont_errors_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cw_get_cont_errors_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[1ae]"></a>cw_get_last_error_char</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, cw.o(i.cw_get_last_error_char))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[16b]"></a>cw_get_temp_char</STRONG> (Thumb, 728 bytes, Stack size 24 bytes, cw.o(i.cw_get_temp_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cw_get_temp_char &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[1ab]"></a>cw_get_uptime_hours_char</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, cw.o(i.cw_get_uptime_hours_char))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[1ac]"></a>cw_get_uptime_mins_char</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, cw.o(i.cw_get_uptime_mins_char))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[152]"></a>cw_init</STRONG> (Thumb, 3150 bytes, Stack size 8 bytes, cw.o(i.cw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cw_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[133]"></a>descrambler_init</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, ax_25.o(i.descrambler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = descrambler_init &rArr; scrambler_init &rArr; lfsr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrambler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_rx_init
</UL>

<P><STRONG><a name="[135]"></a>descrambler_reset</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ax_25.o(i.descrambler_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = descrambler_reset &rArr; scrambler_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrambler_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_rx_reset
</UL>

<P><STRONG><a name="[16f]"></a>ecss_stats_hk</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, services.o(i.ecss_stats_hk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecss_stats_hk &rArr; cnv16_8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
</UL>

<P><STRONG><a name="[171]"></a>eps_temp_valid</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, wod_handling.o(i.eps_temp_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = eps_temp_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_temp_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_wod
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_eps_temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_temp
</UL>

<P><STRONG><a name="[ef]"></a>export_pkt</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, upsat.o(i.export_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = export_pkt &rArr; pack_pkt &rArr; checkSum &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_UART_send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_outbound
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuePop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_pkt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLDLC_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_update
</UL>

<P><STRONG><a name="[175]"></a>firewall</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, upsat.o(i.firewall))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = firewall &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[159]"></a>flash_INIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, services.o(i.flash_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_persistent_mem_init
</UL>

<P><STRONG><a name="[15b]"></a>flash_read_trasmit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, services.o(i.flash_read_trasmit))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_read_persistent_word
</UL>

<P><STRONG><a name="[14e]"></a>free_pkt</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, services.o(i.free_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = free_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ecss
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_ecss
</UL>

<P><STRONG><a name="[157]"></a>getCurrentTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tickcounter.o(i.getCurrentTick))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cmd_ctrl_enabled
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_refresh
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_IDLE
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uptime
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_update
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_type_update
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cmd_and_ctrl_period
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[14b]"></a>get_pkt</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, services.o(i.get_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_pkt
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_heartbeat
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_pkt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_empty_pkt_TM
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_verifyPkt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkPkt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abortPkt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_ecss
</UL>

<P><STRONG><a name="[17b]"></a>hk_app</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, services.o(i.hk_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_empty_pkt_TM
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[14f]"></a>hk_crt_empty_pkt_TM</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, services.o(i.hk_crt_empty_pkt_TM))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = hk_crt_empty_pkt_TM &rArr; hk_crt_pkt_TM &rArr; hk_report_parameters &rArr; comms_wod_send &rArr; send_payload &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TM
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
</UL>

<P><STRONG><a name="[17e]"></a>hk_crt_pkt_TM</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, services.o(i.hk_crt_pkt_TM))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = hk_crt_pkt_TM &rArr; hk_report_parameters &rArr; comms_wod_send &rArr; send_payload &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_empty_pkt_TM
</UL>

<P><STRONG><a name="[17d]"></a>hk_parameters_report</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, services.o(i.hk_parameters_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hk_parameters_report &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_ex_wod_obc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
</UL>

<P><STRONG><a name="[17f]"></a>hk_report_parameters</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, services.o(i.hk_report_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = hk_report_parameters &rArr; comms_wod_send &rArr; send_payload &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wod_convert_temperature
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_wod_send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecss_stats_hk
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv32_8
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_get_temperature
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TM
</UL>

<P><STRONG><a name="[19b]"></a>htons</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, large_data_services.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>

<P><STRONG><a name="[ee]"></a>import_pkt</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, upsat.o(i.import_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = import_pkt &rArr; route_pkt &rArr; hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_UART_recv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_DMA_CHECK
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_inbound
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_dropped_upack
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_dropped_hldlc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLDLC_deframe
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_update
</UL>

<P><STRONG><a name="[14a]"></a>is_cmd_ctrl_enabled</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, comms_manager.o(i.is_cmd_ctrl_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_cmd_ctrl_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_wod_send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[188]"></a>is_tx_enabled</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, comms_manager.o(i.is_tx_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_tx_enabled &rArr; comms_read_persistent_word
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_read_persistent_word
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_payload
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_payload_cw
</UL>

<P><STRONG><a name="[15f]"></a>large_data_IDLE</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, large_data_services.o(i.large_data_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = large_data_IDLE &rArr; large_data_timeout &rArr; route_pkt &rArr; hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_update
</UL>

<P><STRONG><a name="[18a]"></a>large_data_abortPkt</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, large_data_services.o(i.large_data_abortPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = large_data_abortPkt &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_timeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_ackTx_api
</UL>

<P><STRONG><a name="[192]"></a>large_data_abort_api</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, large_data_services.o(i.large_data_abort_api))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_app
</UL>

<P><STRONG><a name="[18b]"></a>large_data_ackTx_api</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, large_data_services.o(i.large_data_ackTx_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = large_data_ackTx_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abortPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_app
</UL>

<P><STRONG><a name="[18e]"></a>large_data_app</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, large_data_services.o(i.large_data_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = large_data_app &rArr; large_data_lastRx_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_ackTx_api
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abort_api
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[194]"></a>large_data_downlinkPkt</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, large_data_services.o(i.large_data_downlinkPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = large_data_downlinkPkt &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
</UL>

<P><STRONG><a name="[195]"></a>large_data_downlinkTx_api</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, large_data_services.o(i.large_data_downlinkTx_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = large_data_downlinkTx_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_pkt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_updatePkt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkPkt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[18f]"></a>large_data_firstRx_api</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, large_data_services.o(i.large_data_firstRx_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = large_data_firstRx_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_verifyPkt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abortPkt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_app
</UL>

<P><STRONG><a name="[153]"></a>large_data_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, large_data_services.o(i.large_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[190]"></a>large_data_intRx_api</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, large_data_services.o(i.large_data_intRx_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = large_data_intRx_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_verifyPkt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abortPkt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_app
</UL>

<P><STRONG><a name="[191]"></a>large_data_lastRx_api</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, large_data_services.o(i.large_data_lastRx_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = large_data_lastRx_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_verifyPkt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abortPkt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_app
</UL>

<P><STRONG><a name="[193]"></a>large_data_retryTx_api</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, large_data_services.o(i.large_data_retryTx_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = large_data_retryTx_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_updatePkt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkPkt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abortPkt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_app
</UL>

<P><STRONG><a name="[189]"></a>large_data_timeout</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, large_data_services.o(i.large_data_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = large_data_timeout &rArr; route_pkt &rArr; hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abortPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_IDLE
</UL>

<P><STRONG><a name="[197]"></a>large_data_updatePkt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, large_data_services.o(i.large_data_updatePkt))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
</UL>

<P><STRONG><a name="[198]"></a>large_data_verifyPkt</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, large_data_services.o(i.large_data_verifyPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = large_data_verifyPkt &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
</UL>

<P><STRONG><a name="[1a6]"></a>lfsr_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ax_25.o(i.lfsr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfsr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrambler_init
</UL>

<P><STRONG><a name="[199]"></a>lfsr_next_bit_scramble</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ax_25.o(i.lfsr_next_bit_scramble))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_count
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scramble_data_nrzi
</UL>

<P><STRONG><a name="[1a7]"></a>lfsr_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ax_25.o(i.lfsr_reset))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrambler_reset
</UL>

<P><STRONG><a name="[7f]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main &rArr; PROCESSOR_Init &rArr; PROCESSOR_Configure_Reqd_MoSt &rArr; comms_init &rArr; CC_TX_init &rArr; CC_TX_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[18d]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, large_data_services.o(i.ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_ackTx_api
</UL>

<P><STRONG><a name="[174]"></a>pack_pkt</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, services.o(i.pack_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pack_pkt &rArr; checkSum &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ecss
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
</UL>

<P><STRONG><a name="[160]"></a>pkt_pool_IDLE</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, services.o(i.pkt_pool_IDLE))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_update
</UL>

<P><STRONG><a name="[155]"></a>pkt_pool_INIT</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, services.o(i.pkt_pool_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[172]"></a>queuePop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, services.o(i.queuePop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queuePop
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>

<P><STRONG><a name="[1a4]"></a>queuePush</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, services.o(i.queuePush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queuePush
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[19d]"></a>recv_ecss</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, comms_manager.o(i.recv_ecss))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = recv_ecss &rArr; route_pkt &rArr; hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_update
</UL>

<P><STRONG><a name="[19e]"></a>recv_payload</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, comms_manager.o(i.recv_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = recv_payload &rArr; check_rf_switch_cmd &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_extract_payload
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_check_dest_callsign
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_invalid_dest_frame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_invalid_crc_frame
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rf_switch_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_update
</UL>

<P><STRONG><a name="[17c]"></a>route_pkt</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, comms_manager.o(i.route_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = route_pkt &rArr; hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ecss
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_wod_obc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firewall
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_ex_wod_obc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuePush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_app
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_refresh
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_timeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_ackTx_api
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_ecss
</UL>

<P><STRONG><a name="[19f]"></a>rx_data</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rx_manager.o(i.rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rx_data &rArr; ax25_recv &rArr; ax25_decode &rArr; ax25_fcs
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_rx_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_recv
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RX_data_packet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_payload
</UL>

<P><STRONG><a name="[150]"></a>rx_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rx_manager.o(i.rx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rx_init &rArr; ax25_rx_init &rArr; descrambler_init &rArr; scrambler_init &rArr; lfsr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_rx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[6c]"></a>rx_update</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rx_manager.o(i.rx_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = rx_update &rArr; recv_payload &rArr; check_rf_switch_cmd &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_frame_received
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Signed_Number_To_Buffer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Frame_To_Buffer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cmd_and_ctrl_period
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_payload
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_ecss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[13b]"></a>scramble_data_nrzi</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ax_25.o(i.scramble_data_nrzi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfsr_next_bit_scramble
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_send
</UL>

<P><STRONG><a name="[139]"></a>scrambler_init</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ax_25.o(i.scrambler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = scrambler_init &rArr; lfsr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfsr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descrambler_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_send
</UL>

<P><STRONG><a name="[13a]"></a>scrambler_reset</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ax_25.o(i.scrambler_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = scrambler_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfsr_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descrambler_reset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_send
</UL>

<P><STRONG><a name="[1a8]"></a>send_cw_beacon</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, comms_manager.o(i.send_cw_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = send_cw_beacon &rArr; send_payload_cw &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cmd_ctrl_enabled
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_uptime_mins_char
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_uptime_hours_char
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_temp_char
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_last_error_char
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_cont_errors_char
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_bat_voltage_char
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_bat_current_char
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_payload_cw
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_update
</UL>

<P><STRONG><a name="[14d]"></a>send_ecss</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, comms_manager.o(i.send_ecss))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = send_ecss &rArr; send_payload &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_payload
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_pkt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_frame_transmitted
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[16a]"></a>send_payload</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, comms_manager.o(i.send_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = send_payload &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_frame_transmitted
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tx_enabled
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ecss
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_wod_send
</UL>

<P><STRONG><a name="[1af]"></a>send_payload_cw</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, comms_manager.o(i.send_payload_cw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = send_payload_cw &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tx_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>

<P><STRONG><a name="[158]"></a>set_cmd_and_ctrl_period</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, comms_manager.o(i.set_cmd_and_ctrl_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_cmd_and_ctrl_period
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[147]"></a>sha256_final</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, sha256.o(i.sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha256_final &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rf_switch_cmd
</UL>

<P><STRONG><a name="[145]"></a>sha256_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sha256.o(i.sha256_init))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rf_switch_cmd
</UL>

<P><STRONG><a name="[1b2]"></a>sha256_transform</STRONG> (Thumb, 558 bytes, Stack size 312 bytes, sha256.o(i.sha256_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>

<P><STRONG><a name="[146]"></a>sha256_update</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, sha256.o(i.sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rf_switch_cmd
</UL>

<P><STRONG><a name="[187]"></a>stats_dropped_hldlc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, services.o(i.stats_dropped_hldlc))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[185]"></a>stats_dropped_upack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, services.o(i.stats_dropped_upack))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[184]"></a>stats_inbound</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, services.o(i.stats_inbound))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stats_inbound &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[173]"></a>stats_outbound</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, services.o(i.stats_outbound))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stats_outbound &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number02_To_Buffer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>

<P><STRONG><a name="[180]"></a>store_ex_wod_obc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wod_handling.o(i.store_ex_wod_obc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = store_ex_wod_obc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
</UL>

<P><STRONG><a name="[1a2]"></a>store_wod_obc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wod_handling.o(i.store_wod_obc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = store_wod_obc &rArr; prepare_wod &rArr; comms_rf_stats_wod_received &rArr; get_wod_eps_temp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_wod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[128]"></a>strnlen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, services.o(i.strnlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strnlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_create_addr_field
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_check_dest_callsign
</UL>

<P><STRONG><a name="[70]"></a>sys_refresh</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, upsat.o(i.sys_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = sys_refresh &rArr; route_pkt &rArr; hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_heartbeat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_pkt_To_Buffer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[1a3]"></a>test_app</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, services.o(i.test_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = test_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_pkt_To_Buffer
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_pkt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[1b3]"></a>test_crt_heartbeat</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, upsat.o(i.test_crt_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = test_crt_heartbeat &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_refresh
</UL>

<P><STRONG><a name="[1b4]"></a>test_crt_pkt</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, services.o(i.test_crt_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = test_crt_pkt &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
</UL>

<P><STRONG><a name="[d8]"></a>tst_debugging</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, services.o(i.tst_debugging))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_extract_payload
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_heartbeat
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_refresh
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firewall
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_pkt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_outbound
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_inbound
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_pkt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_empty_pkt_TM
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSum
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLDLC_frame
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLDLC_deframe
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_verifyPkt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_timeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_retryTx_api
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_intRx_api
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_firstRx_api
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkPkt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_ackTx_api
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_abortPkt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_ecss
</UL>

<P><STRONG><a name="[1b1]"></a>tx_data</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tx_manager.o(i.tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_send
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_data_packet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_TX_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_payload
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_payload_cw
</UL>

<P><STRONG><a name="[151]"></a>tx_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_manager.o(i.tx_init))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_type_update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
</UL>

<P><STRONG><a name="[71]"></a>tx_type_update</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, tx_manager.o(i.tx_type_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_type_update &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_read_persistent_word
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[72]"></a>tx_update</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tx_manager.o(i.tx_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tx_update &rArr; comms_ex_wod_send &rArr; hk_crt_empty_pkt_TM &rArr; hk_crt_pkt_TM &rArr; hk_report_parameters &rArr; comms_wod_send &rArr; send_payload &rArr; tx_data &rArr; ax25_send &rArr; scramble_data_nrzi &rArr; lfsr_next_bit_scramble
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_ex_wod_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_wod_send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cw_beacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[183]"></a>unpack_pkt</STRONG> (Thumb, 734 bytes, Stack size 40 bytes, services.o(i.unpack_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = unpack_pkt &rArr; checkSum &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_pkt_To_Buffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSum
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_ecss
</UL>

<P><STRONG><a name="[122]"></a>updateCurrentTick</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tickcounter.o(i.updateCurrentTick))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
</UL>

<P><STRONG><a name="[186]"></a>verification_app</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, services.o(i.verification_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = verification_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number04_To_Buffer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_lastRx_api
</UL>

<P><STRONG><a name="[1b5]"></a>verification_crt_pkt</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, services.o(i.verification_crt_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = verification_crt_pkt &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Write_Number04_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer &rArr; UART2_BUF_O_Write_Char_To_Buffer &rArr;  UART2_BUF_O_Write_String_To_Buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
</UL>

<P><STRONG><a name="[181]"></a>wod_convert_temperature</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, wod_handling.o(i.wod_convert_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wod_convert_temperature &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_eps_temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_temp
</UL>

<P><STRONG><a name="[1b7]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wod_convert_temperature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_eps_temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_temp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[1ba]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1c0]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wod_convert_temperature
</UL>

<P><STRONG><a name="[1bd]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wod_convert_temperature
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
</UL>

<P><STRONG><a name="[1be]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_eps_temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_temp
</UL>

<P><STRONG><a name="[1fc]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[16d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_temp_char
</UL>

<P><STRONG><a name="[1bf]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1c3]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_eps_temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wod_bat_temp
</UL>

<P><STRONG><a name="[1c1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b9]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1bc]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[1c2]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[1c4]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[1c6]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wod_convert_temperature
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_temp_char
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;large_data_downlinkTx_api
</UL>

<P><STRONG><a name="[1c7]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1c8]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[79]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1fe]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1ff]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1b8]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[12b]"></a>ax25_decoder_enter_sync</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ax_25.o(i.ax25_decoder_enter_sync))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_decode
</UL>

<P><STRONG><a name="[12d]"></a>ax25_decoder_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ax_25.o(i.ax25_decoder_reset))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_decode
</UL>

<P><STRONG><a name="[19a]"></a>bit_count</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ax_25.o(i.bit_count))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfsr_next_bit_scramble
</UL>

<P><STRONG><a name="[131]"></a>reverse_byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ax_25.o(i.reverse_byte))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_send
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ax25_recv
</UL>

<P><STRONG><a name="[165]"></a>get_wod_bat_current</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stats.o(i.get_wod_bat_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_wod_bat_current
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_current_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_wod_received
</UL>

<P><STRONG><a name="[163]"></a>get_wod_bat_temp</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, stats.o(i.get_wod_bat_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_wod_bat_temp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eps_temp_valid
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nanf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_wod_received
</UL>

<P><STRONG><a name="[166]"></a>get_wod_bat_voltage</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stats.o(i.get_wod_bat_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_wod_bat_voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_voltage_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_wod_received
</UL>

<P><STRONG><a name="[167]"></a>get_wod_bus_3300_current</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stats.o(i.get_wod_bus_3300_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_wod_bus_3300_current
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_3300mV_current_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_wod_received
</UL>

<P><STRONG><a name="[168]"></a>get_wod_bus_5000_current</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stats.o(i.get_wod_bus_5000_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_wod_bus_5000_current &rArr; bus_5000mV_current_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_5000mV_current_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_wod_received
</UL>

<P><STRONG><a name="[164]"></a>get_wod_eps_temp</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, stats.o(i.get_wod_eps_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_wod_eps_temp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eps_temp_valid
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nanf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_wod_received
</UL>

<P><STRONG><a name="[162]"></a>get_wod_utc_time</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stats.o(i.get_wod_utc_time))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_wod_received
</UL>

<P><STRONG><a name="[15e]"></a>update_uptime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stats.o(i.update_uptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_uptime
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_update
</UL>

<P><STRONG><a name="[19c]"></a>prepare_wod</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, wod_handling.o(i.prepare_wod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prepare_wod &rArr; comms_rf_stats_wod_received &rArr; get_wod_eps_temp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_temp_valid
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_temp_valid
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eps_temp_valid
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_5000mV_current_valid
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_3300mV_current_valid
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_voltage_valid
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_current_valid
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_wod_received
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_wod_obc
</UL>

<P><STRONG><a name="[9b]"></a>ADC1_Read_Channel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Read_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2PFC_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[108]"></a>PROCESSOR_TASK_Retrieve_State</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Retrieve_State))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Init
</UL>

<P><STRONG><a name="[109]"></a>PROCESSOR_TASK_Store_State</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Store_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PROCESSOR_TASK_Store_State &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
</UL>

<P><STRONG><a name="[141]"></a>check_rf_switch_cmd</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, comms_manager.o(i.check_rf_switch_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = check_rf_switch_cmd &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_sw_cmd_failed
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_payload
</UL>

<P><STRONG><a name="[116]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f1]"></a>PROCESSOR_Configure_Reqd_MoSt</STRONG> (Thumb, 1548 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PROCESSOR_Configure_Reqd_MoSt &rArr; comms_init &rArr; CC_TX_init &rArr; CC_TX_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_persistent_mem_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_rf_stats_set_reset_src
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Temperature_Celsius
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBC_C_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comms_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_GPIO_Store
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Add_Task
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_Startup_04_WDT_Check
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Retrieve_PFC
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Init
</UL>

<P><STRONG><a name="[ff]"></a>PROCESSOR_Identify_Reqd_MoSt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Identify_Reqd_MoSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PROCESSOR_Identify_Reqd_MoSt &rArr; RCC_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Set_MoSt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Retrieve_Reqd_MoSt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Retrieve_PFC
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Init
</UL>

<P><STRONG><a name="[f4]"></a>PROCESSOR_Retrieve_PFC</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Retrieve_PFC))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[100]"></a>PROCESSOR_Retrieve_Reqd_MoSt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Retrieve_Reqd_MoSt))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
</UL>

<P><STRONG><a name="[101]"></a>PROCESSOR_Set_MoSt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Set_MoSt))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
</UL>

<P><STRONG><a name="[1c5]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1bb]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
